{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"auth/","title":"Fluxo de autentica\u00e7\u00e3o &amp; autoriza\u00e7\u00e3o","text":""},{"location":"auth/#como-funciona","title":"Como funciona?","text":"<p>Utilizamos o protocolo OAuth2 [^1] com o Google como Authorization Server.</p> <pre><code> +--------+                               +---------------+\n |        |--(A)- Authorization Request -&gt;|   Resource    |\n |        |                               |     Owner     |\n |        |&lt;-(B)-- Authorization Grant ---|               |\n |        |                               +---------------+\n |        |\n |        |                               +---------------+\n |        |--(C)-- Authorization Grant --&gt;| Authorization |\n | Client |                               |     Server    |\n |        |&lt;-(D)----- Access Token -------|               |\n |        |                               +---------------+\n |        |\n |        |                               +---------------+\n |        |--(E)----- Access Token ------&gt;|    Resource   |\n |        |                               |     Server    |\n |        |&lt;-(F)--- Protected Resource ---|               |\n +--------+                               +---------------+\n</code></pre> <p>Foi implementada a arquitetura da se\u00e7\u00e3o 6.2 da [^2]</p> <pre><code>                   +---------------+      +----------+  +----------+\n                   |               |      |          |  |          |\n                   | Authorization |      |  Token   |  | Resource |\n                   |   Endpoint    |      | Endpoint |  |  Server  |\n                   |               |      |          |  |          |\n                   +---------------+      +----------+  +----------+\n\n                            ^                   ^              ^\n                            |                (F)|              |\n                            |                   v              |\n                            |                                  |\n                            |   +---------------------------+  |\n                            |   |                           |  |\n                            |   |  Token-Mediating Backend  |  |(J)\n                         (D)|   |                           |  |\n                            |   +---------------------------+  |\n                            |                                  |\n                            |       ^     ^     ^     +        |\n                            |  (B,I)|  (C)|  (E)|  (G)|        |\n                            v       v     v     +     v        v\n</code></pre> <p>+-----------------+         +-----------------------------------------+  |                 |  (A,H)  |                                         |  | Static Web Host | +-----&gt; |                 Browser                 |  |                 |         |                                         |  +-----------------+         +-----------------------------------------+</p> <p>O backend \u00e9 simultaneamente o client e o resource server da arquitetura OAuth2, dessa forma, caso algum cliente da API queria consumir nosso dados, o login desse ser feito em: <code>$BACKEND/api/oauth2/authorization/google</code>, Quando bem sucedido, o usu\u00e1rio retornar\u00e1 a p\u00e1gina que fez o login (ex: frontend) com um cookie (JSESSIONID), ao enviar esse cookie para o backend, iremos adquiri o token JWT do usu\u00e1rio no lado do servidor e utiliza-lo para autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o, dessa forma o token do google ou de outro provedor n\u00e3o fica exposto no navegador evitando problemas de seguran\u00e7a.</p> <p>Outra vantagem \u00e9 que nenhum outro servi\u00e7o precisa se preocupar em ser um client na arquitetura OAuth2, visto que tudo j\u00e1 est\u00e1 centralizado no backend</p>"},{"location":"auth/#referencias","title":"Refer\u00eancias","text":"<p>[^1]: https://datatracker.ietf.org/doc/html/rfc6749[The OAuth 2.0 Authorization Framework] [^2]: https://datatracker.ietf.org/doc/html/draft-ietf-oauth-browser-based-apps-18[OAuth 2.0 for Browser-Based Applications] [^3]: [[[spring-issue]]] https://github.com/spring-projects/spring-security/issues/7808#issuecomment-704548457[Spring Security Issue #7808] [^4]: [[[google-openid]]] https://developers.google.com/identity/openid-connect/openid-connect[Google Identity: OpenID Connect] [^5]: [[[openid-connect]]] https://openid.net/specs/openid-connect-core-1_0.html#IDToken[OpenID Connect Core 1.0 - ID Token] [^6]: [[[spring-security-oauth2]]] https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html[Spring Security OAuth2]</p>"},{"location":"Consumindo-a-API/postman-sigaa/","title":"Configura\u00e7\u00e3o OAuth2 do Postman","text":"<p>Neste documento descreveremos como utilizar a SIGAA atrav\u00e9s do Postman com um token de acesso e com um token de usu\u00e1rio:</p>"},{"location":"Consumindo-a-API/postman-sigaa/#pre-requesitos","title":"Pr\u00e9-requesitos","text":"<ul> <li>Postman instalado</li> <li>API Key do SIGAA</li> <li>Client Id do SIGAA</li> <li>Client Secret do SIGAA</li> </ul>"},{"location":"Consumindo-a-API/postman-sigaa/#criando-um-environment-no-postman","title":"Criando um environment no Postman","text":"<p>Recomenda-se que seja utilizado um environment (ambiente) no postman para guardar variaveis e segredos importantes, evitando que eles fiquem \"hard-coded\" e evitando tamb\u00e9m repeti\u00e7\u00e3o.</p> <p>Para criar um environment no Postman, clique no canto superior direito em \"No Environment\" e depois clique no \u00edcone \"+\"</p> <p></p>"},{"location":"Consumindo-a-API/postman-sigaa/#configurando-variaveis-de-ambiente","title":"Configurando variaveis de ambiente","text":"<p>Criado o environment, o pr\u00f3ximo passo \u00e9 adicionar nos campos os secrets necess\u00e1rios para o consumo da api:</p> <p></p>"},{"location":"Consumindo-a-API/postman-sigaa/#consumindo-dados-sem-estar-logado","title":"Consumindo dados sem estar logado","text":"<p>Para consumir dados sem estar logado, \u00e9 necess\u00e1rio adquirir um token de acesso. Para isso voc\u00ea deve fazer uma requisi\u00e7\u00e3o POST para o endpoint <code>https://api.info.ufrn.br/authz-server/oauth/token?client_id={{SIGAA_CLIENT_ID}}&amp;client_secret={{SIGAA_CLIENT_SECRET}}&amp;grant_type=client_credentials</code></p> <p>Os valores <code>{{SIGAA_CLIENT_ID}}</code> e <code>{{SIGAA_CLIENT_SECRET}}</code> s\u00e3o herdados diretamente do environment, que deve ser previamente selecionado no canto superior direito.</p> <p></p> <p>Com a requisi\u00e7\u00e3o bem sucedida, o Postman ir\u00e1 automaticamente configurar o token recebido como header para autentica\u00e7\u00e3o.</p> <p>Com isso voc\u00ea est\u00e1 pronto para consumir a API do SIGAA, por\u00e9m n\u00e3o poder\u00e1 consumir seus dados pessoais ou dados pessoais de outro usu\u00e1rio</p>"},{"location":"Consumindo-a-API/postman-sigaa/#consumindo-dados-com-login","title":"Consumindo dados com Login","text":"<p>Com o environment j\u00e1 configurado, selecione uma request e ent\u00e3o o campo de Authorization. No campo de Authorization Selecione OAuth2.</p> <p></p> <p>Com isso, role um pouco para baixo e configure os campos com os seguintes valores:</p> auth-url https://autenticacao.info.ufrn.br/authz-server/oauth/authorize token-url https://autenticacao.info.ufrn.br/authz-server/oauth/token client-id {{SIGAA_CLIENT_ID}} (Herdado do ambiente) client-secret {{SIGAA_CLIENT_SECRET}} (Herdado do ambiente) <p>E marque o campo \"Authorize using Browser\" para fazer login no SIGAA pelo navegador.</p> <p>O resultado final deve ser similar a:</p> <p></p> <p>Por fim, role at\u00e9 o final e clique em \"Get New Access Token\", ao clicar voc\u00ea ser\u00e1 redirecionado ao navegador onde deve fazer login com o SIGAA.</p> <p>OBS: No ambiente de testes a senha e o login s\u00e3o os mesmos.</p> <p></p> <p>Feito isso, o Postman agora ter\u00e1 um token de acesso referente ao seu usu\u00e1rio, permitindo que voc\u00ea consuma seus dados pessoais,para utiliza-l\u00f3 quando for fazer uma requisi\u00e7\u00e3o basta ir at\u00e9 a aba de \"Authorization\" em uma request e selecionar OAuth2.</p>"}]}